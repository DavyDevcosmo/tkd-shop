generator client {
  provider = "prisma-client-js"
  output   = "../src/app/generated/prisma"
   runtime  = "vercel-edge"
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  filterTypes FilterType[]
  products    Product[]
}

model FilterType {
  id           Int           @id @default(autoincrement())
  name         String
  categoryId   Int
  category     Category      @relation(fields: [categoryId], references: [id])
  filterValues FilterValue[]
}

model FilterValue {
  id             Int             @id @default(autoincrement())
  value          String
  filterTypeId   Int
  filterType     FilterType      @relation(fields: [filterTypeId], references: [id])
  productFilters ProductFilter[]
}
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  products      Product[] // Added opposite relation field
@@map("user")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Product {
  name           String
  description    String
  price          Float
  slug           String
  userId         String?
  id             Int             @id @default(autoincrement())
  categoryId     Int
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  color          String?
  sizeDobok      String?
  beltSize       String?
  category       Category        @relation(fields: [categoryId], references: [id])
  user           User?           @relation(fields: [userId], references: [id])
  productFilters ProductFilter[]
  images         ProductImage[]
}

model ProductFilter {
  id            Int         @id @default(autoincrement())
  productId     Int
  filterValueId Int
  filterValue   FilterValue @relation(fields: [filterValueId], references: [id])
  product       Product     @relation(fields: [productId], references: [id])
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String
  productId Int
  product   Product @relation(fields: [productId], references: [id])
}